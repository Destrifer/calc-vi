---
import Layout from "../layouts/Layout.astro";
import { parseStringPromise } from "xml2js";

// -------------------------
// Параметры расчёта
// -------------------------
const today = new Date();
const fromDate = "2024-06-30"; // Дата начала расчёта
const toDate = today.toISOString().split("T")[0]; // Сегодняшняя дата
const sumDebt = 2_000_000; // Сумма долга (2 000 000 руб.)

// -------------------------
// SOAP-запрос к ЦБ РФ
// -------------------------
const soapRequest = `
  <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:web="http://web.cbr.ru/">
     <soapenv:Header/>
     <soapenv:Body>
        <web:KeyRateXML>
           <web:fromDate>${fromDate}</web:fromDate>
           <web:ToDate>${toDate}</web:ToDate>
        </web:KeyRateXML>
     </soapenv:Body>
  </soapenv:Envelope>`;

const response = await fetch(
	"https://www.cbr.ru/DailyInfoWebServ/DailyInfo.asmx",
	{
		method: "POST",
		headers: {
			"Content-Type": "text/xml; charset=utf-8",
			SOAPAction: "http://web.cbr.ru/KeyRateXML",
		},
		body: soapRequest,
	},
);
const xmlText = await response.text();
const jsonData = await parseStringPromise(xmlText);

// -------------------------
// Обработка данных
// -------------------------
const keyRates =
	jsonData["soap:Envelope"]["soap:Body"][0]["KeyRateXMLResponse"][0][
		"KeyRateXMLResult"
	][0]["KeyRate"][0]["KR"];

const rateHistory = keyRates.map((rate) => ({
	date: new Date(rate["DT"][0]),
	value: parseFloat(rate["Rate"][0]),
}));

const filteredRates = rateHistory
	.filter(
		(rate, index, array) =>
			index === 0 || rate.value !== array[index - 1].value,
	)
	.sort((a, b) => a.date.getTime() - b.date.getTime());

filteredRates.push({
	date: today,
	value: filteredRates[filteredRates.length - 1].value,
});

let totalPenalty = 0;
let breakdown = [];
for (let i = 0; i < filteredRates.length - 1; i++) {
	const currentRate = filteredRates[i].value;
	const startPeriod = filteredRates[i].date;
	const endPeriod = filteredRates[i + 1].date;

	const days =
		(endPeriod.getTime() - startPeriod.getTime()) / (1000 * 60 * 60 * 24);
	if (days > 0) {
		const penalty = ((sumDebt * currentRate) / 100) * (days / 365);
		totalPenalty += penalty;
		breakdown.push({
			start: startPeriod.toISOString().split("T")[0],
			end: endPeriod.toISOString().split("T")[0],
			rate: currentRate,
			days: Math.round(days),
			penalty: penalty,
		});
	}
}
totalPenalty = parseFloat(totalPenalty.toFixed(2));
---

<Layout>
	<h1>Общий расчёт задолженности по неустойке</h1>
	<p>Сумма долга: <strong>2 000 000 руб.</strong></p>
	<p>Общая неустойка: <strong>{totalPenalty} руб.</strong></p>

	<h2>Детализация расчёта</h2>
	<table border="1" cellspacing="0" cellpadding="5">
		<thead>
			<tr>
				<th>Период</th>
				<th>Ставка (%)</th>
				<th>Дней</th>
				<th>Начислено (руб.)</th>
			</tr>
		</thead>
		<tbody>
			{
				breakdown.map((row) => (
					<tr>
						<td>
							{row.start} – {row.end}
						</td>
						<td>{row.rate.toFixed(2)}</td>
						<td>{row.days}</td>
						<td>{row.penalty.toFixed(2)}</td>
					</tr>
				))
			}
		</tbody>
	</table>
</Layout>
